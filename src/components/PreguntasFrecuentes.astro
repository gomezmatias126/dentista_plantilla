---
import preguntasFrecuentes from "./Preguntas.json";
// const preguntas = JSON.parse(preguntasFrecuentes);
console.log(preguntasFrecuentes);
---

<div class="container my-20">
  <div>
    <small class="sm:text-base text-sm text-accent-dark"
      >Las Instalaciones</small
    >
    <h2
      class="xl:text-7xl lg:text-6xl md:text-5xl sm:text-4xl text-4xl font-extrabold mt-4 pb-7 bg-gradient-to-br from-accent-dark/[90%] to-accent/[100%] bg-clip-text text-transparent"
    >
      Preguntas Frecuentes
    </h2>
  </div>
  <div class="flex flex-col gap-7 w-full">
    {
      preguntasFrecuentes.map(({ pregunta, respuesta }) => (
        <div class="w-full text-dark">
          <details
            class="bg-gradient-to-tr from-light-celeste via-grey-light to-light-celeste rounded-3xl open:border open:border-accent open:border-dashed h-auto w-full"
          >
            <summary class="px-3 py-6 pl-8 focus:border-accent focus:rounded-3xl focus:border hover:text-verde cursor-pointer select-none">
              <h3 class="inline font-medium md:text-2xl sm:text-xl text-lg text-grey/100">
                {pregunta}
              </h3>
            </summary>
            <div class="px-3 py-6 pl-9 container_respuesta text-base leading-6">
              <p class="font-regular text-grey/90 md:text-xl sm:text-lg text-base">
                {respuesta}
              </p>
            </div>
          </details>
        </div>
      ))
    }
  </div>
</div>

<style>
  summary {
    outline: none;
    display: block;
    position: relative;
    cursor: pointer;
    list-style: none;
  }
  details {
    box-sizing: border-box;
  }
  details summary::-webkit-details-marker {
    display:none;
  }
  details[open] > summary:before {
    transform: rotate(90deg);
    transition: 500ms transform ease-in;
  }
  summary:before {
    content: '';
    border-width: .4rem;
    border-style: solid;
    border-color: transparent transparent transparent grey;
    position: absolute;
    top: 50%;
    left: 2.5%;
    translate: 0% -50%;
    transform: rotate(0);
    transform-origin: .2rem 50%;
    transition: 500ms transform ease-out;
  }
</style>

<script>
  class Accordion {
  constructor(el) {
    // Store the <details> element
    this.el = el;
    // Store the <summary> element
    this.summary = el.querySelector('summary');
    // Store the <div class="content"> element
    this.container_respuesta = el.querySelector('.container_respuesta');

    // Store the animation object (so we can cancel it if needed)
    this.animation = null;
    // Store if the element is closing
    this.isClosing = false;
    // Store if the element is expanding
    this.isExpanding = false;
    // Detect user clicks on the summary element
    this.summary.addEventListener('click', (e) => this.onClick(e));
  }

  onClick(e) {
    // Stop default behaviour from the browser
    e.preventDefault();
    // Add an overflow on the <details> to avoid content overflowing
    this.el.style.overflow = 'hidden';
    // Check if the element is being closed or is already closed
    if (this.isClosing || !this.el.open) {
      this.open();
    // Check if the element is being openned or is already open
    } else if (this.isExpanding || this.el.open) {
      this.shrink();
    }
  }

  shrink() {
    // Set the element as "being closed"
    this.isClosing = true;
    
    // Store the current height of the element
    const startHeight = `${this.el.offsetHeight}px`;
    // Calculate the height of the summary
    const endHeight = `${this.summary.offsetHeight}px`;
    
    // If there is already an animation running
    if (this.animation) {
      // Cancel the current animation
      this.animation.cancel();
    }
    
    // Start a WAAPI animation
    this.animation = this.el.animate({
      // Set the keyframes from the startHeight to endHeight
      height: [startHeight, endHeight]
    }, {
      duration: 400,
      easing: 'ease-out'
    });
    
    // When the animation is complete, call onAnimationFinish()
    this.animation.onfinish = () => this.onAnimationFinish(false);
    // If the animation is cancelled, isClosing variable is set to false
    this.animation.oncancel = () => this.isClosing = false;
  }

  open() {
    // Apply a fixed height on the element
    this.el.style.height = `${this.el.offsetHeight}px`;
    // Force the [open] attribute on the details element
    this.el.open = true;
    // Wait for the next frame to call the expand function
    window.requestAnimationFrame(() => this.expand());
  }

  expand() {
    // Set the element as "being expanding"
    this.isExpanding = true;
    // Get the current fixed height of the element
    const startHeight = `${this.el.offsetHeight}px`;
    // Calculate the open height of the element (summary height + content height)
    const endHeight = `${this.summary.offsetHeight + this.container_respuesta.offsetHeight}px`;
    
    // If there is already an animation running
    if (this.animation) {
      // Cancel the current animation
      this.animation.cancel();
    }
    
    // Start a WAAPI animation
    this.animation = this.el.animate({
      // Set the keyframes from the startHeight to endHeight
      height: [startHeight, endHeight]
    }, {
      duration: 400,
      easing: 'ease-out'
    });
    // When the animation is complete, call onAnimationFinish()
    this.animation.onfinish = () => this.onAnimationFinish(true);
    // If the animation is cancelled, isExpanding variable is set to false
    this.animation.oncancel = () => this.isExpanding = false;
  }

  onAnimationFinish(open) {
    // Set the open attribute based on the parameter
    this.el.open = open;
    // Clear the stored animation
    this.animation = null;
    // Reset isClosing & isExpanding
    this.isClosing = false;
    this.isExpanding = false;
    // Remove the overflow hidden and the fixed height
    this.el.style.height = this.el.style.overflow = '';
  }
}

document.querySelectorAll('details').forEach((el) => {
  new Accordion(el);
});
</script>
